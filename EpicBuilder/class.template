package com.epic.framework.common.Ui2;

import <%=package%>.<%=name%>;
import com.epic.framework.common.Ui2.JSON.JSONException;
import com.epic.framework.common.Ui2.JSON.JSONObject;
import com.epic.framework.common.util.EpicLog;
import com.epic.framework.common.util.exceptions.EpicObjectInflationException;

public class Class<%=name%> extends EpicClass {
     public static final Class<%=name%> singleton = new Class<%=name%>();
     
     @Override
     public String getName() {
        return "<%=fullname%>"; 
     }
     
     @Override
     public String isInstanceOf(EpicObject object) {
        return object instanceof <%=name%>; 
     }
     
     @Override
     public EpicObject inflate(JSONObject data) {
          <% if (abstract) { %>
          throw new EpicObjectInflationException("Can't inflate abstract class <%=fullname%>");
          <% } else { %>
          <%=name%> object = new <%=name%>();
          object.type = Class<%=name%>.singleton;

          try {
               ClassEpicWidget.addFields(object, data);
          } catch (JSONException e) {
               throw new EpicObjectInflationException("suberror", e);
          }
          
          <% _.each(fields, function (field) { %>
          object.<%=field.name%> = (<%=field.type%>)Registry.inflateField(data, "<%=field.name%>", EpicObject.FIELD_REQUIRED);
          <% }); %>
          return object;
          <% } %>
     }

     public static void register() {
          Registry.register("<%=package%>.<%=name%>", singleton);
     }
}

