#!/usr/bin/env node

var _       = require('underscore');
var program = require('commander');
var fs      = require('fs');

program
  .version('0.1.0')
  .option('-t, --template [filename]', 'Template to process')
  .option('-d, --data [filename]', 'JSON file of data to pass to the template')
  .option('-j, --json [json_string]', 'JSON formatted data to pass to the template')
  .option('-s, --selector [field.field.field...]', 'Selector to choose a subset of the input data')
  .option('-v, --verbose', 'Turn on more verbose output when hitting errors')
  .option('-o, --output [filename]', 'File to write results into')
  .parse(process.argv);

if (! program.template || ! (program.data || program.json)) {
  console.error("Error: template and data/json MUST be specified!");
  console.error(program.helpInformation());
  process.exit(1);
}

var template, data, output;

try {
  template = fs.readFileSync(program.template, 'utf8');
} catch (e) {
  console.error("Error reading template file '%s': %s", program.template, e.message);
  process.exit(1);
}

if (program.json) {
  data = program.json;  
} else if (program.data) {
  try {
    data = fs.readFileSync(program.data, 'utf8');
  } catch (e) {
    console.error("Error reading data file '%s': %s", program.data, e.message);
    process.exit(1);
  }
}

try {
  var data = JSON.parse(data);
} catch (e) {
  console.error("Error: JSON parsing failed on data file '%s': %s", program.data, e.message);
  if (program.verbose) {
    console.error("Data: ", data);
  }
  process.exit(1);
}

if (program.selector) {
  var fields = program.selector.split('.');
  _.each(fields, function (f) {
    data = data[f];
    if (data == undefined) {
      console.error("Error: data file '%s' has no field named '%s'", program.data, program.selector);
      process.exit(1);
    }
  });
}

try {
  var output = _.template(template, data);
} catch (e) {
  console.error("Error processing template: %s", e.message);
  if(program.verbose) {
    console.error("Data: ", data);
  }
  process.exit(1);
}

if(program.output || program.output === '-') {
  try {
    fs.writeFileSync(program.output, output);
  } catch (e) {
    console.error("Error writing output file '%s': %s", program.output, e.message);
    process.exit(1);
  }
} else {
  console.log(output);
}
