#!/usr/bin/env node

var _       = require('underscore');
var program = require('commander');
var fs      = require('fs');
var path    = require('path');

program
  .version('0.1.0')
  .option('-t, --template [filename]', 'Template to process')
  .option('-c, --compile', 'Compile the template into JS code without data')
  .option('-d, --data [filename]', 'JSON file of data to pass to the template')
  .option('-j, --json [json_string]', 'JSON formatted data to pass to the template')
  .option('-s, --selector [field.field.field...]', 'Selector to choose a subset of the input data')
  .option('-v, --verbose', 'Turn on more verbose output when hitting errors')
  .option('-o, --output [filename]', 'File to write results into')
  .parse(process.argv);

if (! (program.template || program.data || program.json || program.compile)) {
  console.error("Error: no arguments specified");
  console.error(program.helpInformation());
  process.exit(1);
}

function compileTemplate(str) {
  var c  = { 
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };  
     
  return 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' +
    'with(obj||{}){__p.push(\'' +
    str.replace(/\\/g, '\\\\')
       .replace(/'/g, "\\'")
       .replace(c.escape || noMatch, function(match, code) {
         return "',_.escape(" + unescape(code) + "),'";
       })  
       .replace(c.interpolate || noMatch, function(match, code) {
         return "'," + unescape(code) + ",'";
       })  
       .replace(c.evaluate || noMatch, function(match, code) {
         return "');" + unescape(code).replace(/[\r\n\t]/g, ' ') + ";__p.push('";
       })  
       .replace(/\r/g, '\\r')
       .replace(/\n/g, '\\n')
       .replace(/\t/g, '\\t')
       + "');} __p.join('');";
}

var template;
if (program.template) {
  try {
    template = fs.readFileSync(program.template, 'utf8');
  } catch (e) {
    console.error("Error reading template file '%s': %s", program.template, e.message);
    process.exit(1);
  }
} else {
  template = null;
}

var data, datafile;
if (program.compile) {
  data = null;
  datafile = 'NULL';
} else if (program.json) {
  data = program.json;
  datafile = 'INLINE';
  try {
    var data = JSON.parse(data);
  } catch (e) {
    console.error("Error: JSON parsing failed for command-line data", e.message);
    if (program.verbose) {
      console.error("Data: ", data);
    }
    process.exit(1);
  }
} else if (program.data) {
  datafile = path.resolve(program.data);
  if (datafile.match(/[.]js$/)) {
    // no need for try/catch here.  Exception will be useful
    data = require(datafile.replace(/[.]js$/, ''));
  } else {
    try {
      data = fs.readFileSync(datafile, 'utf8');
    } catch (e) {
      console.error("Error reading data file '%s': %s", datafile, e.message);
      process.exit(1);
    }
    try {
      var data = JSON.parse(data);
    } catch (e) {
      console.error("Error: JSON parsing failed on data file '%s': %s", datafile, e.message);
      if (program.verbose) {
        console.error("Data: ", data);
      }
      process.exit(1);
    }
  }
} else {
  data = null;
  datafile = 'NULL';
}

if (data) {
}

if (program.selector) {
  var fields = program.selector.split('.');
  _.each(fields, function (f) {
    data = data[f];
    if (data == undefined) {
      console.error("Error: data file '%s' has no field named '%s'", datafile, program.selector);
      process.exit(1);
    }
  });
}

var output;
try {
  if (data === null) {
    output = compileTemplate(template);
  } else if (template === null) {
    output = data;
  } else {
    output = _.template(template, data);
  }
} catch (e) {
  console.error("Error processing template '%s': %s", program.template, e.message);
  if(program.verbose) {
    console.error("Data: ", data);
  }
  process.exit(1);
}

if(program.output && program.output !== '-') {
  try {
    fs.writeFileSync(program.output, output);
  } catch (e) {
    console.error("Error writing output file '%s': %s", program.output, e.message);
    process.exit(1);
  }
} else {
  console.log(output);
}
